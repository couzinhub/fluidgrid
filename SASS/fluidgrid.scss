/*FluidGrid CSS Framework -- 
  Hubert Florin -- 
  couzin.hub@gmail.com -- 
  Copyright 2009 Hubert Florin -- 
  Built with SASS http://sass-lang.com/ */


//////////////////////////////////////////////////////////////////////
// Grid Columns and Gutters
// Here you can choose the number of columns and the width
// of the gutters
//////////////////////////////////////////////////////////////////////

$grid: 12;
$gutter: 2; // in %

// Full / Light version (without push/pull, COMING SOON)
// $type: "full";



//////////////////////////////////////////////////////////////////////
// FLUIDGRID BASES
// Here We set the ground rules for the elements in the grid
//////////////////////////////////////////////////////////////////////



*,.reset {margin:0; padding:0;}
body {margin:0 auto; position: relative; min-width: 600px;}

// Default attributes for all columns

.defaults{float:left; position:relative; margin-right:$gutter#{"%"}; left:$gutter#{"%"};}
$sequence: 1;
@while $sequence < $grid {
  .span-#{$sequence} {
    @extend .defaults;
  }
  $sequence: $sequence + 1; 
}

// Style for a full width span
.span-full {width: 100%;float: left;clear: both;}

// Reset the margin for first and last span
.grid_container{
  .alpha, .omega {left:0; margin-left:0; margin-right:0;}
  .alpha {clear: both;}
  .omega {float:right;}
}

// Alpha (first) and Omega (last) spans    
.grid_container {
  clear:both; position:relative; float:none;
  .alpha, .omega {left:0;}
}

/* visual grid */
.col { position: absolute; bottom:0; height:100%; z-index:-1; background-color:#def2ff;}

/* Clearfix for page container */
.clearfix,
.grid_container {
  &:after { content:"."; display:block; height:0; clear:both; visibility:hidden;}
}


//////////////////////////////////////////////////////////////////////
// Setting main variables
//////////////////////////////////////////////////////////////////////


// Defining the width of only 1 column
$col_width : (100 - (($grid - 1) * $gutter)) / $grid;

// Defining the width of 1 column plus 1 gutter
$col_gut_width : $col_width + $gutter;
  
// Setting first Span number for recursive operations
$span : 1;

// Setting column number
$cols :$grid - 1;


//////////////////////////////////////////////////////////////////////
//// Second Level Grid (Subgrid)
//// We start with this so we can override them later
//////////////////////////////////////////////////////////////////////

@while $cols > 0 {
  
  // Resetting Coef on each pass
  // The coef help setting the width of the columns in the subgrids
  $coef : 100 / (($col_gut_width * $cols) - $gutter);
  
  .grid_container {
    .span-#{$cols} {      
      
      //////////////////////////////////////////////////////////////////////
      // sub columns attributes
      //////////////////////////////////////////////////////////////////////

      $subcols:$cols;
      @while $subcols > 0 {
        
        // normal subcolumns
        .span-#{$subcols} {
          width : (($col_gut_width * $subcols) - $gutter) * $coef#{"%"};
          left : $gutter * $coef#{"%"};
          margin-right : $gutter * $coef#{"%"};
        }

        // PREFIX for subcolumns
        .prefix-#{$subcols} {
          padding-left : ($col_gut_width * $subcols) * $coef#{"%"};
        }

        // SUFFIX for subcolumns
        .suffix-#{$subcols} {
          padding-right : ($col_gut_width * $subcols) * $coef#{"%"};
        }

        // PUSH for subcolumns
        .push-#{$subcols} {
          margin-left : ($col_gut_width * $subcols) * $coef#{"%"};
          margin-right : -($col_gut_width * $subcols) * $coef#{"%"};
          &.alpha{
            margin-right : -($col_gut_width * $subcols) * $coef#{"%"};
          }
        }
        
        // PULL for subcolumns
        .pull-#{$subcols} {
          margin-left : -($col_gut_width * $subcols) * $coef#{"%"};
          margin-right : ($col_gut_width * $subcols) * $coef#{"%"};
          &.omega{
            margin-right : ($col_gut_width * $subcols) * $coef#{"%"};
          }
        }
        
        $subcols : $subcols - 1;

      }
      
      //////////////////////////////////////////////////////////////////////      
      // alpha and omage in sub columns
      //////////////////////////////////////////////////////////////////////

      .alpha, .omega {margin-right:0;}

      //////////////////////////////////////////////////////////////////////

    }
  }
  $cols : $cols - 1 ;  
}


//////////////////////////////////////////////////////////////////////
//// Alpha and Omega Reset for Sub grid
//////////////////////////////////////////////////////////////////////


$cols :$grid - 1;
.alpha_omega_holder {left:0;}
@while $cols > 0 {
  .grid_container .span-#{$cols} .alpha, .grid_container .span-#{$cols} .omega {
    @extend .alpha_omega_holder;
  }
  $cols : $cols - 1;
}


//////////////////////////////////////////////////////////////////////
//// First Level Grid
//////////////////////////////////////////////////////////////////////



@while $span <= $grid {  
  .grid_container {
    
    // Width of the columns in the first level grid
    .span-#{$span} {
      width: (($col_gut_width * $span) - $gutter)#{"%"};
    } 
    
    // Position of the grid columns
    .col-#{$span} {
      left: (($col_gut_width * $span) - $col_gut_width)#{"%"};
    }
    
    // PREFIX for first level columns
    .prefix-#{$span} {
      padding-left: ($col_gut_width * $span)#{"%"};
    }

    // SUFFIX for first level columns
    .suffix-#{$span} {
      padding-right: ($col_gut_width * $span)#{"%"};
    }
    
    // PUSH for first level columns
    .push-#{$span} {
      margin-left: ($col_gut_width * $span)#{"%"};
      margin-right: -($col_gut_width * $span) + $gutter#{"%"};
      &.alpha {
        margin-right: -($col_gut_width * $span)#{"%"};
      }
    }

    // PUSH for first level columns
    .pull-#{$span} {
      margin-left: -($col_gut_width * $span)#{"%"};
      margin-right: ($col_gut_width * $span) + $gutter#{"%"};
      &.omega {
        margin-right: ($col_gut_width * $span)#{"%"};
      }
    }


    
    
  }
  $span: $span + 1;
}